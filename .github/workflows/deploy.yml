name: Deploy to PythonAnywhere

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://hieunguyenhanu.pythonanywhere.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create deployment
      uses: actions/github-script@v7
      id: deployment
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Deploy to PythonAnywhere',
            auto_merge: false,
            required_contexts: []
          });
          return deployment.data.id;
      
    - name: Set deployment to in progress
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.result }},
            state: 'in_progress',
            description: 'Deployment started'
          });
      
    - name: Trigger PythonAnywhere Webhook
      id: webhook
      run: |
        payload='{"ref": "refs/heads/main", "repository": {"name": "Roomate-Cost-Splitter"}}'
        signature=$(echo -n "$payload" | openssl dgst -sha256 -hmac "${{ secrets.WEBHOOK_SECRET }}" | sed 's/^.* //')
        response=$(curl -X POST \
          -H "Content-Type: application/json" \
          -H "X-Hub-Signature-256: sha256=$signature" \
          -d "$payload" \
          https://hieunguyenhanu.pythonanywhere.com/webhook)
        echo "response=$response" >> $GITHUB_OUTPUT
        
    - name: Set deployment success
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.result }},
            state: 'success',
            description: 'Deployment completed successfully',
            environment_url: 'https://hieunguyenhanu.pythonanywhere.com'
          });
          
    - name: Set deployment failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.result }},
            state: 'failure',
            description: 'Deployment failed'
          });

